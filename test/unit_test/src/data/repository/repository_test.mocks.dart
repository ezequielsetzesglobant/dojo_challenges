// Mocks generated by Mockito 5.4.6 from annotations
// in dojo_challenges/test/unit_test/src/data/repository/repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dojo_challenges/src/core/resource/data_state.dart' as _i2;
import 'package:dojo_challenges/src/data/data_source/local/DAOs/movie_dao.dart'
    as _i7;
import 'package:dojo_challenges/src/domain/api_service/api_service_interface.dart'
    as _i4;
import 'package:dojo_challenges/src/domain/entity/movie_entity.dart' as _i8;
import 'package:dojo_challenges/src/domain/entity/movie_list_entity.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiServiceInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiServiceInterface extends _i1.Mock
    implements _i4.ApiServiceInterface {
  MockApiServiceInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.DataState<_i6.MovieListEntity>> getMovieList() =>
      (super.noSuchMethod(
            Invocation.method(#getMovieList, []),
            returnValue: _i5.Future<_i2.DataState<_i6.MovieListEntity>>.value(
              _FakeDataState_0<_i6.MovieListEntity>(
                this,
                Invocation.method(#getMovieList, []),
              ),
            ),
          )
          as _i5.Future<_i2.DataState<_i6.MovieListEntity>>);
}

/// A class which mocks [MovieDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDao extends _i1.Mock implements _i7.MovieDao {
  MockMovieDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Database get dataBase =>
      (super.noSuchMethod(
            Invocation.getter(#dataBase),
            returnValue: _FakeDatabase_1(this, Invocation.getter(#dataBase)),
          )
          as _i3.Database);

  @override
  _i5.Future<void> deleteMovies() =>
      (super.noSuchMethod(
            Invocation.method(#deleteMovies, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> insertMovies(List<_i8.MovieEntity>? movies) =>
      (super.noSuchMethod(
            Invocation.method(#insertMovies, [movies]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i8.MovieEntity>> getMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getMovies, []),
            returnValue: _i5.Future<List<_i8.MovieEntity>>.value(
              <_i8.MovieEntity>[],
            ),
          )
          as _i5.Future<List<_i8.MovieEntity>>);
}
