// Mocks generated by Mockito 5.4.6 from annotations
// in dojo_challenges/test/widget_test/presentation/provider/provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;
import 'dart:convert' as _i14;
import 'dart:typed_data' as _i15;

import 'package:dojo_challenges/src/core/resource/data_state.dart' as _i3;
import 'package:dojo_challenges/src/data/data_source/local/DAOs/movie_dao.dart'
    as _i4;
import 'package:dojo_challenges/src/domain/api_service/api_service_interface.dart'
    as _i13;
import 'package:dojo_challenges/src/domain/data_base/data_base_interface.dart'
    as _i11;
import 'package:dojo_challenges/src/domain/entity/movie_entity.dart' as _i12;
import 'package:dojo_challenges/src/domain/entity/movie_list_entity.dart'
    as _i10;
import 'package:dojo_challenges/src/domain/repository/repository_interface.dart'
    as _i9;
import 'package:dojo_challenges/src/domain/use_case/use_case_interface.dart'
    as _i7;
import 'package:http/http.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:sqflite/sqflite.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDataState_1<T> extends _i1.SmartFake implements _i3.DataState<T> {
  _FakeDataState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMovieDao_2 extends _i1.SmartFake implements _i4.MovieDao {
  _FakeMovieDao_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_3 extends _i1.SmartFake implements _i5.Database {
  _FakeDatabase_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_4 extends _i1.SmartFake implements _i6.Response {
  _FakeResponse_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i6.StreamedResponse {
  _FakeStreamedResponse_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [UseCaseInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockUseCaseInterface<T> extends _i1.Mock
    implements _i7.UseCaseInterface<T> {
  MockUseCaseInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<T> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(this, Invocation.method(#call, [])),
                  (T v) => _i2.Future<T>.value(v),
                ) ??
                _FakeFuture_0<T>(this, Invocation.method(#call, [])),
          )
          as _i2.Future<T>);
}

/// A class which mocks [RepositoryInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryInterface extends _i1.Mock
    implements _i9.RepositoryInterface {
  MockRepositoryInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i3.DataState<_i10.MovieListEntity>> getMovieList() =>
      (super.noSuchMethod(
            Invocation.method(#getMovieList, []),
            returnValue: _i2.Future<_i3.DataState<_i10.MovieListEntity>>.value(
              _FakeDataState_1<_i10.MovieListEntity>(
                this,
                Invocation.method(#getMovieList, []),
              ),
            ),
          )
          as _i2.Future<_i3.DataState<_i10.MovieListEntity>>);
}

/// A class which mocks [DataBaseInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataBaseInterface extends _i1.Mock implements _i11.DataBaseInterface {
  MockDataBaseInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieDao get movieDao =>
      (super.noSuchMethod(
            Invocation.getter(#movieDao),
            returnValue: _FakeMovieDao_2(this, Invocation.getter(#movieDao)),
          )
          as _i4.MovieDao);

  @override
  _i2.Future<void> openDataBase() =>
      (super.noSuchMethod(
            Invocation.method(#openDataBase, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> closeDataBase() =>
      (super.noSuchMethod(
            Invocation.method(#closeDataBase, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);
}

/// A class which mocks [MovieDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDao extends _i1.Mock implements _i4.MovieDao {
  MockMovieDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Database get dataBase =>
      (super.noSuchMethod(
            Invocation.getter(#dataBase),
            returnValue: _FakeDatabase_3(this, Invocation.getter(#dataBase)),
          )
          as _i5.Database);

  @override
  _i2.Future<void> deleteMovies() =>
      (super.noSuchMethod(
            Invocation.method(#deleteMovies, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> insertMovies(List<_i12.MovieEntity>? movies) =>
      (super.noSuchMethod(
            Invocation.method(#insertMovies, [movies]),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<List<_i12.MovieEntity>> getMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getMovies, []),
            returnValue: _i2.Future<List<_i12.MovieEntity>>.value(
              <_i12.MovieEntity>[],
            ),
          )
          as _i2.Future<List<_i12.MovieEntity>>);
}

/// A class which mocks [ApiServiceInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiServiceInterface extends _i1.Mock
    implements _i13.ApiServiceInterface {
  MockApiServiceInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i3.DataState<_i10.MovieListEntity>> getMovieList() =>
      (super.noSuchMethod(
            Invocation.method(#getMovieList, []),
            returnValue: _i2.Future<_i3.DataState<_i10.MovieListEntity>>.value(
              _FakeDataState_1<_i10.MovieListEntity>(
                this,
                Invocation.method(#getMovieList, []),
              ),
            ),
          )
          as _i2.Future<_i3.DataState<_i10.MovieListEntity>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i6.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i6.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i2.Future<_i6.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i2.Future<_i6.Response>);

  @override
  _i2.Future<_i6.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i2.Future<_i6.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i2.Future<_i6.Response>);

  @override
  _i2.Future<_i6.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i2.Future<_i6.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i2.Future<_i6.Response>);

  @override
  _i2.Future<_i6.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i2.Future<_i6.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i2.Future<_i6.Response>);

  @override
  _i2.Future<_i6.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i2.Future<_i6.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i2.Future<_i6.Response>);

  @override
  _i2.Future<_i6.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i2.Future<_i6.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i2.Future<_i6.Response>);

  @override
  _i2.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i2.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i2.Future<String>);

  @override
  _i2.Future<_i15.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i2.Future<_i15.Uint8List>.value(_i15.Uint8List(0)),
          )
          as _i2.Future<_i15.Uint8List>);

  @override
  _i2.Future<_i6.StreamedResponse> send(_i6.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i2.Future<_i6.StreamedResponse>.value(
              _FakeStreamedResponse_5(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i2.Future<_i6.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}
